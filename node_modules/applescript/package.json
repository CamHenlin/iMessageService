{
  "name": "applescript",
  "description": "Easily execute arbitrary AppleScript code on OS X through NodeJS.",
  "version": "0.2.1",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net"
  },
  "keywords": [
    "applescript",
    "mac",
    "osx"
  ],
  "main": "./lib/applescript",
  "lib": "./lib",
  "engines": {
    "node": ">= 0.2.0"
  },
  "readme": "node-applescript\n================\n\nA high-level way to execute AppleScript code through NodeJS, and retrieve\nthe result as a native JavaScript object (when possible). In reality, this\nmodule is just a simple wrapper around the OS X `osascript` command.\n\n### Why?\nAppleScripts are the only way to communicate and interact with certain\nexternal OS X processes, for example [iTunes](http://www.itunes.com).\n\nEasy Install\n------------\n\n    npm install applescript\n\nRequirements\n------------\n\n * Mac (or Hackintosh) running [OS X](http://www.apple.com/macosx) (tested with Snow Leopard)\n * [NodeJS](http://nodejs.org) (v0.2.0 or newer)\n\nUsage\n-----\n\nThe `node-applescript` module provides `execString` and `execFile` functions\nto easily execute AppleScript commands and buffer the output into a calback.\n\n    var applescript = require(\"node-applescript\");\n    \n    // Very basic AppleScript command. Returns the song name of each\n    // currently selected track in iTunes as an 'Array' of 'String's.\n    var script = 'tell application \"iTunes\" to get name of selection';\n    \n    applescript.execString(script, function(err, rtn) {\n      if (err) {\n        // Something went wrong!\n      }\n      if (Array.isArray(rtn)) {\n        rtn.forEach(function(songName) {\n          console.log(songName);\n        });\n      }\n    });\n\n`execFile` works the exact same way, except you pass the _path_ of the AppleScript\n(`*.applescript`) file as the first argument instead of the command itself, and you\nmay pass an optional Array of String arguments to send to the applescript file.\n\nLicence\n-------\n\nThe `node-applescript` module is licensed under the MIT license, of course!\n\n",
  "readmeFilename": "README.md",
  "_id": "applescript@0.2.1",
  "dist": {
    "shasum": "f1efb2c09c241b0012aad0e16e94089ecd8047d8"
  },
  "_from": "applescript@",
  "_resolved": "https://registry.npmjs.org/applescript/-/applescript-0.2.1.tgz"
}
